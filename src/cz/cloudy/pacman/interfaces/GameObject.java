package cz.cloudy.pacman.interfaces;

import cz.cloudy.pacman.core.GameObjectCollector;
import cz.cloudy.pacman.core.Renderer;
import cz.cloudy.pacman.types.Vector2;
import javafx.scene.image.Image;

public abstract class GameObject
        implements IRenderable {
    private int     id;
    private String  name;
    private Vector2 position;
    private float   rotation;
    private Vector2 scale;
    private Image   sprite;
    private int     depth;

    /**
     * Generates GameObject without specifying name.
     * Name is automatically generated by class name and id.
     */
    public GameObject() {
        this(null);
    }

    /**
     * Constructs GameObject with specified name.
     * if name is set to null, name is generated by class and id.
     *
     * @param name Object name
     */
    public GameObject(String name) {
        this.id = GameObjectCollector.getRequestedId()
                                     .getId();
        this.name = name != null ? name : this.getClass()
                                              .getSimpleName() + "_" + id;

        this.position = Vector2.IDENTITY;
        this.rotation = 0f;
        this.scale = Vector2.SCALE_IDENTITY;
        this.sprite = null;
        this.depth = 0;
    }

    public String getName() {
        return name;
    }

    public Vector2 getPosition() {
        return position;
    }

    public void setPosition(Vector2 position) {
        this.position = position;
    }

    public float getRotation() {
        return rotation;
    }

    public void setRotation(float rotation) {
        this.rotation = rotation;
    }

    public Vector2 getScale() {
        return scale;
    }

    public void setScale(Vector2 scale) {
        this.scale = scale;
    }

    public Image getSprite() {
        return sprite;
    }

    public void setSprite(Image sprite) {
        this.sprite = sprite;
    }

    public int getDepth() {
        return depth;
    }

    public void setDepth(int depth) {
        this.depth = depth;
    }

    public GameObject move(Vector2 offset) {
        this.position.add(offset);
        return this;
    }

    /**
     * Is invoked when GameObject is created.
     */
    public abstract void create();

    /**
     * Is invoked when new frame is rendered.
     */
    public abstract void update();

    /**
     * Is invoked when destroy is executed on actual GameObject.
     */
    public abstract void dispose();


    /**
     * Invokes destroy process.
     */
    public final void destroy() {
        dispose();
        Renderer.instance.getGameObjectFactory()
                         .disposeObject(this);
    }

    /**
     * Returns automatically generated id for actual object.
     *
     * @return current object's id
     */
    public final int getId() {
        return id;
    }
}
